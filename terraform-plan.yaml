# Da inicio a la pipeline
#  Empieza con una pequeña pipeline que puede construir y destruir tu codigo
#   Se añaden pasos que construir, iniciar tests, destrucciones y mas, mas informacion en la siguiente pagina:
# https://aka.ms/yaml 

name: "plan"

trigger: # utiliza como autómata (trigger = gatillo) el directorio principal main
  branches:
    include:
      - main

pool:
  name: local # la original si fuera la maquina virtual es vmImage: ubuntu-latest, al utilizar un agente auto-hospedado se usa name: local 

steps: # tras comprobación de usuario y proyecto instalará terraform con este comando
- task: TerraformInstaller@0
  displayName: "Install Terraform"
  inputs:
    terraformVersion: 'latest'  # en teoría con la ultima version (4.238.25) funcionaría más optimizado cambiando la version por latest, funcionan todas desde la 0.2
    terraformDownloadLocation: 'https://releases.hashicorp.com/terraform'

- task: TerraformTaskV4@4 #indica una tarea, en este caso, un terraform init da inicio al proceso
  inputs:
    provider: 'azurerm'
    command: 'init' #"terraform init" junto con "-reconfigure" o "-migrate-state" se pueden usar par diferentes configuraciones, -force-copy para responder si a todo
    backendServiceArm: 'Azure for Students(23dd767a-27e3-434a-883f-5cef612f88fe)'
    backendAzureRmResourceGroupName: 'Grupojalg'
    backendAzureRmStorageAccountName: 'almacenamientojalg'
    backendAzureRmContainerName: 'contenedorjose'
    backendAzureRmKey: 'tf/terraform.tfstate'  # b66f5301-722b-4f9c-83a8-0e493ca177b5 key del tfstate en esta linea si está auto-hospedado no es necesario ya que no cambia, 
  displayName: 'Terraform init'                 # si es hospedado (vm linux) poner el siguiente inputbackendAzureRmKey: 'tf/terraform.tfstate'

- task: TerraformTaskV4@4
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/Templates'
    commandOptions: '-out=terraform.tfplan'
    environmentServiceNameAzureRM: 'Azure for Students(23dd767a-27e3-434a-883f-5cef612f88fe)'
  displayName: 'Terraform Plan' # mostrará el display del plan de terraform una vez validada la estructura y aplicada

- task: PublishBuildArtifacts@1 # Para publicar un artefacto
  inputs:
    pathtoPublish: '$(Build.SourcesDirectory)/Templates/terraform.tfplan'
    artifactName: 'Tizona' # nombre del artefacto
    publishLocation: 'Container'
  displayName: 'Publish Terraform plan'

- script: echo Vamos jose, que ya casi lo tienes!
  displayName: 'Run a one-line script'

# - script: |
#    echo añade otras tares de construcción, test y destruccion de tu proyecto.
#    echo para ver  https://aka.ms/yaml
# displayName: 'Muestra una multilinea de guion'
# Aún teniendo todo bien aparecia el siguiente error hay que irse aquí para auditarse, ya que si no es de pago
# y rellenar el formulario en el siguiente enlace https://aka.ms/azpipelines-parallelism-request
